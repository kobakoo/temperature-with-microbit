{"files":{"pxt.json":"{\n    \"name\": \"bluetooth-temperature-sensor\",\n    \"version\": \"0.0.11\",\n    \"description\": \"A Bluetooth service to expose a temperature reading.\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"bluetooth\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"extension.cpp\",\n        \"TemperatureSensorService.cpp\",\n        \"TemperatureSensorService.h\",\n        \"shims.d.ts\",\n        \"enums.d.ts\"\n    ],\n    \"testFiles\": [\n        \"tests.ts\"\n    ],\n    \"public\": true\n}","README.md":"# bluetooth temperature sensor service\n\nA Bluetooth service to expose a temperature reading.\n\n## Usage\n\nThis package allows to create a Bluetooth temperature sensor and provide the data from\nany custom sensor attached to the @boardname@. In fact, it can be used to stream any data!\n\n```blocks\nbluetooth.startTemperatureSensorService(() => {\n    bluetooth.setTemperatureSensorValue(input.lightLevel());\n})\n```\n\nThen use the temperature charting from [Bitty data logger](http://www.bittysoftware.com/apps/bitty_data_logger.html) to visualize it.\n\n## Supported targets\n\n* for PXT/microbit\n(The metadata above is needed for package search.)\n\n```package\nbluetooth\nbluetooth-temperature-sensor\n```\n\n## License\n\nMIT\n\n## Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n","extension.cpp":"#include \"pxt.h\"\n#include \"TemperatureSensorService.h\"\n\nnamespace bluetooth {\n    TemperatureSensorService* _pService = NULL;\n    Action _handler;\n\n    void updateTemperature() {\n        while (NULL != _pService) {\n            // run action that updates the temperature\n            pxt::runAction0(_handler);\n            // raise event to trigger notification\n            MicroBitEvent ev(MICROBIT_ID_SENSOR_TEMPERATURE, MICROBIT_THERMOMETER_EVT_UPDATE);\n            // wait period\n            fiber_sleep(_pService->getPeriod());            \n        }\n    }\n\n    /**\n    * Starts a custom sensor service. The handler must call ``setSensorTemperature`` \n    * to update the temperature sent to the service.\n    */\n    //% blockId=bluetooth_startTemperatureSensorService block=\"bluetooth temperature sensor service\"\n    void startTemperatureSensorService(Action handler) {\n        if (NULL != _pService) return;\n\n        _pService = new TemperatureSensorService(*uBit.ble);\n        _handler = handler;\n        pxt::incr(_handler);\n        create_fiber(updateTemperature);\n    }\n\n    /**\n    * Sets the current temperature value on the external temperature sensor\n    */\n    //% blockId=bluetooth_setTemperatureSensorValue block=\"bluetooth set temperature sensor value (Â°C) %temperature\"\n    void setTemperatureSensorValue(int temperature) {\n        if (NULL == _pService) return;\n\n        _pService->setTemperature(temperature);\n    }\n}\n","TemperatureSensorService.cpp":"/**\n  * Class definition for the custom MicroBit Temperature Service.\n  * Provides a BLE service to remotely read the silicon temperature of the nRF51822.\n  */\n#include \"MicroBitConfig.h\"\n#include \"ble/UUID.h\"\n\n#include \"TemperatureSensorService.h\"\n\n/**\n  * Constructor.\n  * Create a representation of the TemperatureService\n  * @param _ble The instance of a BLE device that we're running on.\n  */\nTemperatureSensorService::TemperatureSensorService(BLEDevice &_ble) :\n        ble(_ble)\n{\n    // Create the data structures that represent each of our characteristics in Soft Device.\n    GattCharacteristic  temperatureDataCharacteristic(TemperatureSensorServiceDataUUID, (uint8_t *)&temperatureDataCharacteristicBuffer, 0,\n    sizeof(temperatureDataCharacteristicBuffer), GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_READ | GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_NOTIFY);\n\n    GattCharacteristic  temperaturePeriodCharacteristic(TemperatureSensorServicePeriodUUID, (uint8_t *)&temperaturePeriodCharacteristicBuffer, 0,\n    sizeof(temperaturePeriodCharacteristicBuffer), GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_READ | GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_WRITE);\n\n    // Initialise our characteristic values.\n    temperatureDataCharacteristicBuffer = 0;\n    temperaturePeriodCharacteristicBuffer = 1000;\n\n    // Set default security requirements\n    temperatureDataCharacteristic.requireSecurity(SecurityManager::MICROBIT_BLE_SECURITY_LEVEL);\n    temperaturePeriodCharacteristic.requireSecurity(SecurityManager::MICROBIT_BLE_SECURITY_LEVEL);\n\n    GattCharacteristic *characteristics[] = {&temperatureDataCharacteristic, &temperaturePeriodCharacteristic};\n    GattService         service(TemperatureSensorServiceUUID, characteristics, sizeof(characteristics) / sizeof(GattCharacteristic *));\n\n    ble.addService(service);\n\n    temperatureDataCharacteristicHandle = temperatureDataCharacteristic.getValueHandle();\n    temperaturePeriodCharacteristicHandle = temperaturePeriodCharacteristic.getValueHandle();\n\n    ble.gattServer().write(temperatureDataCharacteristicHandle,(uint8_t *)&temperatureDataCharacteristicBuffer, sizeof(temperatureDataCharacteristicBuffer));\n    ble.gattServer().write(temperaturePeriodCharacteristicHandle,(uint8_t *)&temperaturePeriodCharacteristicBuffer, sizeof(temperaturePeriodCharacteristicBuffer));\n\n    ble.onDataWritten(this, &TemperatureSensorService::onDataWritten);\n    if (EventModel::defaultEventBus)\n        EventModel::defaultEventBus->listen(MICROBIT_ID_SENSOR_TEMPERATURE, MICROBIT_THERMOMETER_EVT_UPDATE, this, &TemperatureSensorService::temperatureUpdate, MESSAGE_BUS_LISTENER_IMMEDIATE);\n}\n\nvoid TemperatureSensorService::setTemperature(int value) \n{\n    temperatureDataCharacteristicBuffer = value;    \n}\n\nvoid TemperatureSensorService::setPeriod(int value)\n{\n    temperaturePeriodCharacteristicBuffer = max(1, value);\n}\n\nvoid TemperatureSensorService::temperatureUpdate(MicroBitEvent)\n{\n    if (ble.getGapState().connected)\n    {\n        ble.gattServer().notify(temperatureDataCharacteristicHandle,(uint8_t *)&temperatureDataCharacteristicBuffer, sizeof(temperatureDataCharacteristicBuffer));\n    }\n}\n\nint TemperatureSensorService::getPeriod() \n{\n    return temperaturePeriodCharacteristicBuffer;\n}\n\n/**\n  * Callback. Invoked when any of our attributes are written via BLE.\n  */\nvoid TemperatureSensorService::onDataWritten(const GattWriteCallbackParams *params)\n{\n    if (params->handle == temperaturePeriodCharacteristicHandle && params->len >= sizeof(temperaturePeriodCharacteristicBuffer))\n    {\n        setPeriod(*((uint16_t *)params->data));\n        ble.gattServer().write(temperaturePeriodCharacteristicHandle, (const uint8_t *)&temperaturePeriodCharacteristicBuffer, sizeof(temperaturePeriodCharacteristicBuffer));\n    }\n}\n\n\nconst uint8_t  TemperatureSensorServiceUUID[] = {\n    0xe9,0x5d,0x61,0x00,0x25,0x1d,0x47,0x0a,0xa0,0x62,0xfa,0x19,0x22,0xdf,0xa9,0xa8\n};\n\nconst uint8_t  TemperatureSensorServiceDataUUID[] = {\n    0xe9,0x5d,0x92,0x50,0x25,0x1d,0x47,0x0a,0xa0,0x62,0xfa,0x19,0x22,0xdf,0xa9,0xa8\n};\n\nconst uint8_t  TemperatureSensorServicePeriodUUID[] = {\n    0xe9,0x5d,0x1b,0x25,0x25,0x1d,0x47,0x0a,0xa0,0x62,0xfa,0x19,0x22,0xdf,0xa9,0xa8\n};\n","TemperatureSensorService.h":"#ifndef BLUETOOTH_TEMPERATURE_SENSOR_SERVICE_H\n#define BLUETOOTH_TEMPERATURE_SENSOR_SERVICE_H\n\n#include \"MicroBitConfig.h\"\n#include \"ble/BLE.h\"\n#include \"MicroBitThermometer.h\"\n#include \"EventModel.h\"\n\n#define MICROBIT_ID_SENSOR_TEMPERATURE 9500\n\n// UUIDs for our service and characteristics\nextern const uint8_t  TemperatureSensorServiceUUID[];\nextern const uint8_t  TemperatureSensorServiceDataUUID[];\nextern const uint8_t  TemperatureSensorServicePeriodUUID[];\n\n/**\n  * Class definition for the custom MicroBit Temperature Service.\n  * Provides a BLE service to beam any temperature\n  */\nclass TemperatureSensorService\n{\n    public:\n\n    /**\n      * Constructor.\n      * Create a representation of the TemperatureService\n      * @param _ble The instance of a BLE device that we're running on.\n      */\n    TemperatureSensorService(BLEDevice &_ble);\n\n    /**\n      * Callback. Invoked when any of our attributes are written via BLE.\n      */\n    void onDataWritten(const GattWriteCallbackParams *params);\n\n    /**\n    * Updates the temperature in the characteristic\n    */\n    void setTemperature(int temp);\n\n    /**\n    * Gets the current period in ms\n    */\n    int getPeriod();\n\n    private:\n\n    // Temperature update callback\n    void temperatureUpdate(MicroBitEvent e);\n\n    void setPeriod(int value);\n\n    // Bluetooth stack we're running on.\n    BLEDevice           \t&ble;\n\n    // memory for our 8 bit temperature characteristic.\n    int8_t             temperatureDataCharacteristicBuffer;\n    uint16_t           temperaturePeriodCharacteristicBuffer;\n\n    // Handles to access each characteristic when they are held by Soft Device.\n    GattAttribute::Handle_t temperatureDataCharacteristicHandle;\n    GattAttribute::Handle_t temperaturePeriodCharacteristicHandle;\n};\n\n\n#endif\n","shims.d.ts":"// Auto-generated. Do not edit.\ndeclare namespace bluetooth {\n\n    /**\n     * Starts a custom sensor service. The handler must call ``setSensorTemperature`` \n     * to update the temperature sent to the service.\n     */\n    //% blockId=bluetooth_startTemperatureSensorService block=\"bluetooth temperature sensor service\" shim=bluetooth::startTemperatureSensorService\n    function startTemperatureSensorService(handler: () => void): void;\n\n    /**\n     * Sets the current temperature value on the external temperature sensor\n     */\n    //% blockId=bluetooth_setTemperatureSensorValue block=\"bluetooth set temperature sensor value (Â°C) %temperature\" shim=bluetooth::setTemperatureSensorValue\n    function setTemperatureSensorValue(temperature: number): void;\n}\n\n// Auto-generated. Do not edit. Really.\n","enums.d.ts":"// Will be auto-generated if needed.\n","tests.ts":"// tests go here; this will not be compiled when this package is used as a library\nbluetooth.startTemperatureSensorService(() => {\n    led.toggle(0,0)\n    bluetooth.setTemperatureSensorValue(input.lightLevel());\n})"}}